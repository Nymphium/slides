@inproceedings{landin1964mechanical,
  author = {Burge, W. H.},
  title = {The evaluation, classification and interpretation of expressions},
  year = {1964},
  isbn = {9781450379182},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/800257.808888},
  doi = {10.1145/800257.808888},
  booktitle = {Proceedings of the 1964 19th ACM National Conference},
  pages = {11.401–11.4022},
  series = {ACM '64},
}

@inproceedings{danvy2004secd,
  author = "Danvy, Olivier and Millikin, Kevin",
  editor = "Butterfield, Andrew and Grelck, Clemens and Huch, Frank",
  title = "A Rational Deconstruction of Landin's J Operator",
  booktitle = "Implementation and Application of Functional Languages",
  year = "2006",
  publisher = "Springer Berlin Heidelberg",
  address = "Berlin, Heidelberg",
  pages = "55--73",
  isbn = "978-3-540-69175-4",
}

@article{landin1965generalization,
  author = {Landin, Peter J.},
  title = {A Generalization of Jumps and Labels},
  year = {1998},
  issue_date = {September 1998},
  publisher = {Kluwer Academic Publishers},
  address = {USA},
  volume = {11},
  number = {2},
  issn = {1388-3690},
  url = {https://doi.org/10.1023/A:1010068630801},
  doi = {10.1023/A:1010068630801},
  journal = {Higher Order Symbol. Comput.},
  month = sep,
  pages = {125–143},
  numpages = {19},
}

% ?
@techreport{scheme1978revised,
  title = {The Revised Report on SCHEME: A Dialect of LISP},
  author = {Steele Jr, Guy L and Sussman, Gerald Jay},
  institution = {MIT Artificial Intelligence Laboratory},
  year = {1978},
  number = {AI Memo 452},
  url = {https://dspace.mit.edu/handle/1721.1/6283},
}

% ?
@techreport{sussman1975scheme,
  title = {SCHEME: An Interpreter for Extended Lambda Calculus},
  author = {Sussman, Gerald Jay and Steele Jr, Guy L.},
  institution = {MIT Artificial Intelligence Laboratory},
  year = {1975},
  number = {AI Memo 349},
  url = {https://dspace.mit.edu/handle/1721.1/5794},
}

@inproceedings{reynolds1972definitional,
  author = {Reynolds, John C.},
  title = {Definitional interpreters for higher-order programming languages},
  year = {1972},
  isbn = {9781450374927},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/800194.805852},
  doi = {10.1145/800194.805852},
  booktitle = {Proceedings of the ACM Annual Conference - Volume 2},
  pages = {717–740},
  numpages = {24},
  keywords = {SECD machine, Reference, Programming language, PAL, Order of
              application, Language definition, Lambda calculus, LISP, J-operator
              , Interpreter, Higher-order function, GEDANKEN, Continuation,
              Closure, Applicative language},
  location = {Boston, Massachusetts, USA},
  series = {ACM '72},
}

@inproceedings{felleisen1988prompt,
  author = {Felleisen, Mattias},
  title = {The theory and practice of first-class prompts},
  year = {1988},
  isbn = {0897912527},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/73560.73576},
  doi = {10.1145/73560.73576},
  booktitle = {Proceedings of the 15th ACM SIGPLAN-SIGACT Symposium on
               Principles of Programming Languages},
  pages = {180–190},
  numpages = {11},
  location = {San Diego, California, USA},
  series = {POPL '88},
}

@inproceedings{danvy1990abstracting,
  author = {Danvy, Olivier and Filinski, Andrzej},
  title = {Abstracting control},
  year = {1990},
  isbn = {089791368X},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/91556.91622},
  doi = {10.1145/91556.91622},
  booktitle = {Proceedings of the 1990 ACM Conference on LISP and Functional
               Programming},
  pages = {151–160},
  numpages = {10},
  location = {Nice, France},
  series = {LFP '90},
}

@article{10.1145/278283.278285,
  author = {Appel, Andrew W.},
  title = {SSA is functional programming},
  year = {1998},
  issue_date = {April 1998},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {33},
  number = {4},
  issn = {0362-1340},
  url = {https://doi.org/10.1145/278283.278285},
  doi = {10.1145/278283.278285},
  journal = {SIGPLAN Not.},
  month = apr,
  pages = {17–20},
  numpages = {4},
}

@article{dybvig2005a,
  author = {Dyvbig, R. Kent and Peyton Jones, Simon and Sabry, Amr},
  title = {A monadic framework for delimited continuations},
  year = {2007},
  issue_date = {November 2007},
  publisher = {Cambridge University Press},
  address = {USA},
  volume = {17},
  number = {6},
  issn = {0956-7968},
  url = {https://doi.org/10.1017/S0956796807006259},
  doi = {10.1017/S0956796807006259},
  journal = {J. Funct. Program.},
  month = nov,
  pages = {687–730},
  numpages = {44},
}

@article{moggi1991notions,
  title = {Notions of computation and monads},
  journal = {Information and Computation},
  volume = {93},
  number = {1},
  pages = {55-92},
  year = {1991},
  note = {Selections from 1989 IEEE Symposium on Logic in Computer Science},
  issn = {0890-5401},
  doi = {https://doi.org/10.1016/0890-5401(91)90052-4},
  url = {https://www.sciencedirect.com/science/article/pii/0890540191900524},
  author = {Eugenio Moggi},
}

@article{10.1023/A:1010060315625,
  author = {Thielecke, Hayo},
  title = {An Introduction to Landin‘s “A Generalization of Jumps and Labels”},
  year = {1998},
  issue_date = {September 1998},
  publisher = {Kluwer Academic Publishers},
  address = {USA},
  volume = {11},
  number = {2},
  issn = {1388-3690},
  url = {https://doi.org/10.1023/A:1010060315625},
  doi = {10.1023/A:1010060315625},
  journal = {Higher Order Symbol. Comput.},
  month = sep,
  pages = {117–123},
  numpages = {7},
  keywords = {J-operator, SECD-machine, call/cc, goto, history of programming languages}
}

@book{appel1992cwc,
author = {Appel, Andrew W.},
title = {Compiling with continuations},
year = {1992},
isbn = {0521416957},
publisher = {Cambridge University Press},
address = {USA}
}

  @article{10.1145/1160074.1159808,
author = {Kiselyov, Oleg and Shan, Chung-chieh and Sabry, Amr},
title = {Delimited dynamic binding},
year = {2006},
issue_date = {September 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/1160074.1159808},
doi = {10.1145/1160074.1159808},
abstract = {Dynamic binding and delimited control are useful together in many settings, including Web applications, database cursors, and mobile code. We examine this pair of language features to show that the semantics of their interaction is ill-defined yet not expressive enough for these uses.We solve this open and subtle problem. We formalise a typed language DB+DC that combines a calculus DB of dynamic binding and a calculus DC of delimited control. We argue from theoretical and practical points of view that its semantics should be based on delimited dynamic binding: capturing a delimited continuation closes over part of the dynamic environment, rather than all or none of it; reinstating the captured continuation supplements the dynamic environment, rather than replacing or inheriting it. We introduce a type- and reduction-preserving translation from DB + DC to DC, which proves that delimited control macro-expresses dynamic binding. We use this translation to implement DB+DC in Scheme, OCaml, and Haskell.We extend DB + DC with mutable dynamic variables and a facility to obtain not only the latest binding of a dynamic variable but also older bindings. This facility provides for stack inspection and (more generally) folding over the execution context as an inductive data structure.},
journal = {SIGPLAN Not.},
month = sep,
pages = {26–37},
numpages = {12},
keywords = {delimited continuations, dynamic binding, monads}
}

@inproceedings{kiselyov2006delimited,
author = {Kiselyov, Oleg and Shan, Chung-chieh and Sabry, Amr},
title = {Delimited dynamic binding},
year = {2006},
isbn = {1595933093},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1159803.1159808},
doi = {10.1145/1159803.1159808},
abstract = {Dynamic binding and delimited control are useful together in many settings, including Web applications, database cursors, and mobile code. We examine this pair of language features to show that the semantics of their interaction is ill-defined yet not expressive enough for these uses.We solve this open and subtle problem. We formalise a typed language DB+DC that combines a calculus DB of dynamic binding and a calculus DC of delimited control. We argue from theoretical and practical points of view that its semantics should be based on delimited dynamic binding: capturing a delimited continuation closes over part of the dynamic environment, rather than all or none of it; reinstating the captured continuation supplements the dynamic environment, rather than replacing or inheriting it. We introduce a type- and reduction-preserving translation from DB + DC to DC, which proves that delimited control macro-expresses dynamic binding. We use this translation to implement DB+DC in Scheme, OCaml, and Haskell.We extend DB + DC with mutable dynamic variables and a facility to obtain not only the latest binding of a dynamic variable but also older bindings. This facility provides for stack inspection and (more generally) folding over the execution context as an inductive data structure.},
booktitle = {Proceedings of the Eleventh ACM SIGPLAN International Conference on Functional Programming},
pages = {26–37},
numpages = {12},
keywords = {delimited continuations, dynamic binding, monads},
location = {Portland, Oregon, USA},
series = {ICFP '06}
}

  @inproceedings{10.1145/155090.155104,
author = {Sitaram, Dorai},
title = {Handling control},
year = {1993},
isbn = {0897915984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/155090.155104},
doi = {10.1145/155090.155104},
abstract = {Non-local control transfer and exception handling have a long tradition in higher-order programming languages such as Common Lisp, Scheme and ML. However, each language stops short of providing a full and complementary approach—control handling is provided only if the corresponding control operator is first-order. In this work, we describe handlers in a higher-order control setting. We invoke our earlier theoretical result that all denotational models of control languages invariably include capabilities that handle control. These capabilities, when incorporated into the language, form an elegant and powerful higher-order generalization of the first-order exception-handling mechanism.},
booktitle = {Proceedings of the ACM SIGPLAN 1993 Conference on Programming Language Design and Implementation},
pages = {147–155},
numpages = {9},
location = {Albuquerque, New Mexico, USA},
series = {PLDI '93}
}

@article{Dorai1993handling,
author = {Sitaram, Dorai},
title = {Handling control},
year = {1993},
issue_date = {June 1993},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {28},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/173262.155104},
doi = {10.1145/173262.155104},
abstract = {Non-local control transfer and exception handling have a long tradition in higher-order programming languages such as Common Lisp, Scheme and ML. However, each language stops short of providing a full and complementary approach—control handling is provided only if the corresponding control operator is first-order. In this work, we describe handlers in a higher-order control setting. We invoke our earlier theoretical result that all denotational models of control languages invariably include capabilities that handle control. These capabilities, when incorporated into the language, form an elegant and powerful higher-order generalization of the first-order exception-handling mechanism.},
journal = {SIGPLAN Not.},
month = jun,
pages = {147–155},
numpages = {9}
}

@inproceedings{shan2004shift,
  title={Shift to control},
  author={Shan, Chung-chieh},
  booktitle={Proceedings of the 5th workshop on Scheme and Functional Programming},
  pages={99--107},
  year={2004}
}


@book{dijkstra1972structured,
editor = {Dahl, O. J. and Dijkstra, E. W. and Hoare, C. A. R.},
title = {Structured programming},
year = {1972},
isbn = {0122005503},
publisher = {Academic Press Ltd.},
address = {GBR},
}

@inproceedings{bauer2013effect,
  author = {Bauer, Andrej and Pretnar, Matija},
  year = {2013},
  month = {06},
  pages = {},
  title = {An Effect System for Algebraic Effects and Handlers},
  volume = {10},
  isbn = {978-3-642-40205-0},
  journal = {Logical Methods in Computer Science},
  doi = {10.1007/978-3-642-40206-7_1}
}
